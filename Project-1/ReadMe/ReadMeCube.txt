Sdi2000292 Fotopoulos Dimitrios
Sdi2000292 Kammas Zisis

Η κλάση Cube περίεχει το Κ (ποσες διαστάσεις θα εχει το Cube) , το Μ πόσα σημεία
σύνολο θα πάρουμε , το Probes πόσες γειτονικές έδρες θα ελέγξουμε, Ν πόσους γείτονες
ζητάμε , R το εύρος αναζήτησης. Επίσης περιέχει και το vectors που αρχικοποιήται απο
το dataset (μεσα στην cube_main). Αντίθετα με τον LSH στην κλάση Cube  έχουμε μόνο 
ένα hashtable. Επίσης σαν private function έχουμε μια συνάρτηση neighboringBuckets
που επιστρέφει τις γειτονικές κορυφές και μας είναι χρήσιμη στις συναρτήσεις αναζήτησης
και την συνάρτηση initiation που κάνει αρχικοποίηση του hashtable παρόμοια με την LSH
με την διαφορά οτι στην LSH έκανε σε L πίνακες ενώ εδώ κάνει μόνο σε έναν.

Όσο να αφορά τις public συναρτήσεις ο Cοnstructor αρχικοποιεί τις private μεταβλητές
και καλεί και την initiation για χαρτογράφηση του hashtable. Destructor απελευθερώνει
οτι δεσμεύτικε δυναμικά. 
Οσο να αφορά τους αλγόριθμους αναζήτησης θα αναλυθούν μετά απο την υλοποίση της κλά-
σης HashTableCube.

H κλάση HashTableCube περιέχει σαν private μεταβλητές το μέγεθος του πίνακα , το Κ που
είναι πόσες hashFunctions θα δημιουργηθούν εναν πίνακα table που αναπαριστά το hashtable
και το randomVectors,w,t (διανύσματα με μέγεθος Κ) που στην ουσία ορίζουν τις Κ hi συνα-
ρτήσεις που θα χρειαστούν για την δημιουργία της hashfunction.
H κλαση HashTableCube σαν public συναρτήσεις περιέχει τον Constructor που αρχικοποιεί
τα παραπάνω , την hashfunction που πέρνει ενα στοιχείο και μέσω συνδιασμων 0 η 1 των Hi
συναρτήσεων επιστρέφει το index που θα μπει το κάθε δίανυσμα . Η συνάρτηση
addToTable που της δίνουμε το index και το διάνυσμα και τοποθετεί το δίανυσμα στο αντιστοιχο
bucket. Και η συνάρτηση getBucket για την επιστροφή του αντίστοιχου bucket απο το hashTable/


Η exhaustiveSearch ψάχνει ένα ένα τα διανύσματα όπως ακριβώς τον LSH (Brute Force Method).

Η approximateKNN στην αρχή ψάχνει για κοντινότερο στοιχείο στο bucket που επιστρέφει
η HashFunction του HashTableCube και μετά στα γειτονικά (με την nearestNeighbours) μέχρι
η να ψάξει και τα Ν στοιχεία η να αναζητήση όλα τα probes (ότι έρθει πρώτο). Μέσα στο κάθε
bucket κρατάει τα Ν κοντίτερα. Η approximateRangeSearch δουλεύει με τον ίδιο τρόπο με την
διαφορά οτι αντί να ψάχνει τα Ν κοντίτερα ψάχνει μέσα σε ένα ευρος στα αντιστοιχα buckets. 
